{"ts":1369473588300,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar express = require('express')\r\n  , routes = require('./routes')\r\n  , user = require('./routes/user')\r\n  , http = require('http')\r\n  , path = require('path');\r\n\r\nvar app = express();\r\n\r\n// all environments\r\napp.set('port', process.env.PORT || 3000);\r\napp.set('views', __dirname + '/views');\r\napp.set('view engine', 'ejs');\r\napp.use(express.favicon());\r\napp.use(express.logger('dev'));\r\napp.use(express.bodyParser());\r\napp.use(express.methodOverride());\r\napp.use(express.cookieParser('your secret here'));\r\napp.use(express.session());\r\napp.use(app.router);\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// development only\r\nif ('development' == app.get('env')) {\r\n\tapp.use(express.errorHandler());\r\n}\r\n\r\napp.get('/', routes.index);\r\napp.get('/users', user.list);\r\n\r\nvar server = http.createServer(app);\r\n\r\n/*\r\n * イベント待受状態を開始する\r\n */\r\nserver.listen(app.get('port'), function(){\r\n    console.log('Express server listening on port ' + app.get('port'));\r\n\t//console.log(\"Server running at http://\" + setting.IP + \":\" + setting.PORT + \"/\");\r\n\tconsole.log(\"サーバを終了する際は[ctrl + c]を押してください\");\r\n});\r\n\r\n\r\n\r\n//ここまでexpress\r\n//======================================================================\r\n\r\n\r\n/**\r\n * モジュール読み込み\r\n */\r\nvar fs = require(\"fs\");\r\nvar socketio = require(\"socket.io\");\r\nvar io = socketio.listen(server);\r\n// var mongodb = require(\"mongodb\");\r\n\r\n// /**\r\n//  * データベースサーバ用意\r\n//  */\r\n// var setting = {};\r\n// setting.IP      = \"192.168.1.202\";\r\n// setting.PORT    = 1337;\r\n// setting.HEADER  = { \"Content-Type\": \"text/html; charset=UTF-8\" };\r\n\r\n// setting.DB_IP   = \"192.168.1.202\";\r\n// setting.DB_PORT = 27017;\r\n// setting.DB_NAME = \"bRogue\";\r\n\r\n\r\n//  /*\r\n//  * MongoDBサーバへの接続\r\n//  */\r\n// var databaseServer = new mongodb.Server(setting.DB_IP, setting.DB_PORT);\r\n// var database       = new mongodb.Db(setting.DB_NAME, databaseServer, {safe: true});\r\n\r\n// // グローバル変数を用意する\r\n// var TODO_DATA;\r\n\r\n// database.open(function (err, db) {\r\n// \tif (err) { throw err; }\r\n// \t// 以下データベースにアクセスするコード\r\n// \tconsole.log(setting.DB_NAME + \"にアクセスしました\");\r\n\r\n// \t// データベース接続時に変数を更新する\r\n// \tdb.collection(\"datas\").find().toArray(function (err, values) {\r\n// \t\tTODO_DATA = values;\r\n// \t\tconsole.log(values);\r\n// \t\tconsole.log(setting.DB_NAME + \"のデータを整形しました\");\r\n// \t});\r\n// });\r\n\r\n// var setDBData = function (data) {\r\n// \t// データを格納する\r\n// \tdatabase.collection(\"datas\").insert(data, function (err, result) {\r\n// \t\tif (err) { throw err; }\r\n// \t\tconsole.log(setting.DB_NAME + \"のデータを格納しました\");\r\n// \t});\r\n// };\r\n\r\n// var deleteDBData = function (dataId) {\r\n// \tconsole.log(dataId);\r\n// \t// データを削除する\r\n// \tdatabase.collection(\"datas\").remove({\"_id\": new mongodb.ObjectID(dataId)}, function (err) {\r\n// \t\tconsole.log(setting.DB_NAME + \"のデータを削除しました\");\r\n// \t});\r\n// };\r\n\r\n// var getDBData = function (res) {\r\n// \t// データを配列に整形する\r\n// \tdatabase.collection(\"datas\").find().toArray(function (err, values) {\r\n// \t\t// result = values;\r\n// \t\tTODO_DATA = values;\r\n// \t\t// console.log(\"sampledbにデータを整形しました\");\r\n\r\n// \t\t// 結果を表示する\r\n// \t\t// HTTPレスポンスヘッダを作成・送信(200:OK,500:ServerError,404:NotFound)\r\n// \t\tres.writeHead(200, setting.HEADER);\r\n// \t\tres.write(HTML_HEAD);\r\n// \t\tres.write(getHtmlBody(TODO_DATA));\r\n// \t\tres.write(HTML_FOOTER);\r\n// \t\tres.end();\r\n// \t});\r\n// };\r\n\r\n\r\n/**\r\n * メンバーデータ\r\n */\r\nvar MEMBER = [];\r\nvar setMember = function (id, data) {\r\n\tMEMBER.push({\"id\": id, \"data\": data});\r\n\t// console.dir(MEMBER);\r\n};\r\nvar deleteMember = function (id) {\r\n\tfor (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t\tMEMBER.splice(i, 1);\r\n\t\t}\r\n\t}\r\n};\r\nvar modifyMember = function (id, data) {\r\n\tfor (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t\tMEMBER[i].data.position = data.position;\r\n\t\t\tMEMBER[i].data.angle    = data.angle;\r\n\t\t}\r\n\t}\r\n};\r\nvar getMember = function (id) {\r\n\tvar result = [];\r\n\tfor (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult.push(MEMBER[i].data);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\nvar getName = function (id) {\r\n\tfor (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t\treturn MEMBER[i].name;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n/*\r\n * 通信時の処理\r\n * クライアント側がio.connect()を実行すると、サーバの以下処理が実行される(イベント名：connection)\r\n */\r\nio.sockets.on(\"connection\", function (socket) {\r\n\t// 接続したら[connected]イベントを発信\r\n\tsocket.emit(\"connected\", {});\r\n\r\n\t// ゲームのイベント受信処理\r\n\tgameMessage(socket);\r\n\r\n\t// 接続が終了した\r\n\tsocket.on(\"disconnect\", function (cliant) {\r\n\t\t// 切断したメンバーを削除\r\n\t\tdeleteMember(socket.id);\r\n\r\n\t\t// 名前を削除したので、メンバー名の書き換えメッセージを送信\r\n\t\t// socket.emit(\"deletePlayer\", getMember());\r\n\t\tsocket.broadcast.emit(\"deleteAnotherPlayer\", socket.id);\r\n\t});\r\n\r\n});\r\n\r\n/*\r\n * ゲームのイベント受信処理\r\n */\r\nfunction gameMessage(socket) {\r\n\t// クライアント接続時に発した[addMember]イベントの受信処理\r\n\tsocket.on(\"addPlayerName\", function (client) {\r\n\t\tconsole.log(\"お名前 : \" + client.name);\r\n\r\n\t\t// メンバー追加処理(仮の名前)\r\n\t\tsetMember(socket.id, client);\r\n\t\tclient.id = socket.id;\r\n\r\n\t\t// 名前を追加したので、メンバー名の書き換えメッセージを送信\r\n\t\tsocket.emit(\"addedPlayer\", socket.id);\r\n\t\tsocket.broadcast.emit(\"addedAnotherPlayer\", client);\r\n\r\n\t\t// 既に参加しているメンバーのデータを送る\r\n\t\tsocket.emit(\"addedAnotherPlayers\", getMember(socket.id));\r\n\t});\r\n\r\n\tsocket.on(\"movePlayer\", function (client) {\r\n\t\tmodifyMember(socket.id, client);\r\n\t\tclient.id = socket.id;\r\n\t\tsocket.broadcast.emit(\"moveAnotherPlayer\", client);\r\n\t});\r\n};\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":5332}]],"length":5332}
{"contributors":[],"silentsave":false,"ts":1369473636660,"patch":[[{"diffs":[[0,"n(server"],[1,", 1"],[0,");\r\n// v"]],"start1":1352,"start2":1352,"length1":16,"length2":19}]],"length":5335,"saved":false}
{"ts":1369473656783,"patch":[[{"diffs":[[0,"server, "],[-1,"1"],[1,"{'log level': 1}"],[0,");\r\n// v"]],"start1":1354,"start2":1354,"length1":17,"length2":32}]],"length":5350,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369477531007,"patch":[[{"diffs":[[0,"var "],[-1,"setMember = function (id, data) {\r\n\t"],[1,"getName = function (id) {\r\n    for (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t\treturn MEMBER[i].name;\r\n\t\t}\r\n\t}\r\n    return null;\r\n};\r\nvar setMember = function (id, data) {\r\n    if (getName(id) === null) {\r\n        "],[0,"MEMB"]],"start1":3342,"start2":3342,"length1":44,"length2":250},{"diffs":[[0,"ata});\r\n"],[1,"    "],[0,"\t// cons"]],"start1":3620,"start2":3620,"length1":16,"length2":20},{"diffs":[[0,"r(MEMBER);\r\n"],[1,"    }\r\n"],[0,"};\r\nvar dele"]],"start1":3646,"start2":3646,"length1":24,"length2":31},{"diffs":[[0,"};\r\n"],[-1,"var getName = function (id) {\r\n\tfor (var i = 0; i < MEMBER.length; ++i) {\r\n\t\tif (MEMBER[i].id === id) {\r\n\t\t\treturn MEMBER[i].name;\r\n\t\t}\r\n\t}\r\n};\r\n"],[0,"\r\n\r\n"]],"start1":4233,"start2":4233,"length1":153,"length2":8}]],"length":5422,"saved":false}
{"ts":1369477653419,"patch":[[{"diffs":[[0,"t) {\r\n\t\t"],[1,"// "],[0,"console."]],"start1":4885,"start2":4885,"length1":16,"length2":19}]],"length":5425,"saved":false}
{"ts":1369482412181,"patch":[[{"diffs":[[0,"ngle;\r\n\t\t}\r\n\t}\r\n"],[1,"    console.dir(MEMBER);\r\n"],[0,"};\r\nvar getMembe"]],"start1":4013,"start2":4013,"length1":32,"length2":58}]],"length":5451,"saved":false}
{"ts":1369483416037,"patch":[[{"diffs":[[0,";\r\n    \t"],[-1,"// "],[0,"console."]],"start1":3625,"start2":3625,"length1":19,"length2":16}]],"length":5448,"saved":false}
{"ts":1369483836713,"patch":[[{"diffs":[[0,"\": data});\r\n"],[1,"        console.log(\"setMember\");\r\n"],[0,"    \tconsole"]],"start1":3616,"start2":3616,"length1":24,"length2":59},{"diffs":[[0,"r(MEMBER);\r\n"],[-1,""],[0,"    }\r\n};\r\nv"]],"start1":3678,"start2":3678,"length1":24,"length2":24},{"diffs":[[0,"\t}\r\n\t}\r\n"],[1,"    console.log(\"deleteMember\");\r\n"],[0,"};\r\nvar "]],"start1":3837,"start2":3837,"length1":16,"length2":50},{"diffs":[[0,"ta.angle;\r\n\t\t}\r\n"],[-1,""],[0,"\t}\r\n"],[1,"    console.log(\"modifyMember\");\r\n"],[0,"    console.dir("]],"start1":4075,"start2":4075,"length1":36,"length2":70}]],"length":5551,"saved":false}
