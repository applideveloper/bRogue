{"ts":1369442916514,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * AnimationCharactor\r\n */\r\n(function(ns) {\r\n\r\n    var DOWN_NEUTRAL  = 1;\r\n    var UP_NEUTRAL    = 19;\r\n    var LEFT_NEUTRAL  = 7;\r\n    var RIGHT_NEUTRAL = 13;\r\n\r\n    var UPLEFT_NEUTRAL    = 16;\r\n    var UPRIGHT_NEUTRAL   = 22;\r\n    var DOWNLEFT_NEUTRAL  = 4;\r\n    var DOWNRIGHT_NEUTRAL = 10;\r\n\r\n    var ANGLE_LEFT      = 180;\r\n    var ANGLE_UPLEFT    = 135;\r\n    var ANGLE_UP        = 90;\r\n    var ANGLE_UPRIGHT   = 45;\r\n    var ANGLE_RIGHT     = 0;\r\n    var ANGLE_DOWNRIGHT = 315;\r\n    var ANGLE_DOWN      = 270;\r\n    var ANGLE_DOWNLEFT  = 225;\r\n\r\n    // コマ送りアニメーションの基本的な書式を利用\r\n    var IMAGE_WIDTH  = 120;\r\n    var IMAGE_HEIGHT = 112;\r\n    var IMAGE_DIVIDE_COLUMN = 6;\r\n    var IMAGE_DIVIDE_ROW    = 4;\r\n    var IMAGE_ANIM_COUNT    = 24; // 枚数\r\n\r\n    ns.AnimationCharactor = tm.createClass({\r\n        superClass : tm.app.AnimationSprite,\r\n\r\n        init: function (imageName, frame, drawImageScaleSize) {\r\n\r\n            frame = frame || {\r\n                width:  IMAGE_WIDTH/IMAGE_DIVIDE_COLUMN,\r\n                height: IMAGE_HEIGHT/IMAGE_DIVIDE_ROW,\r\n                count:  IMAGE_ANIM_COUNT\r\n            };\r\n\r\n            drawImageScaleSize = drawImageScaleSize || 4;\r\n\r\n            var ss = tm.app.SpriteSheet({\r\n                image: imageName,\r\n                frame: frame,\r\n                animations: {\r\n                    \"onlydown\":   [DOWN_NEUTRAL,   DOWN_NEUTRAL+1, \"_onlydown1\", 5],\r\n                    \"_onlydown1\": [DOWN_NEUTRAL+1, DOWN_NEUTRAL+2, \"_onlydown2\", 5],\r\n                    \"_onlydown2\": [DOWN_NEUTRAL,   DOWN_NEUTRAL+1, \"_onlydown3\", 5],\r\n                    \"_onlydown3\": [DOWN_NEUTRAL-1, DOWN_NEUTRAL,   \"onlydown\",   5],\r\n\r\n                    \"onlyup\":   [UP_NEUTRAL,   UP_NEUTRAL+1, \"_onlyup1\", 5],\r\n                    \"_onlyup1\": [UP_NEUTRAL+1, UP_NEUTRAL+2, \"_onlyup2\", 5],\r\n                    \"_onlyup2\": [UP_NEUTRAL,   UP_NEUTRAL+1, \"_onlyup3\", 5],\r\n                    \"_onlyup3\": [UP_NEUTRAL-1, UP_NEUTRAL,   \"onlyup\",   5],\r\n\r\n                    \"onlyleft\":   [LEFT_NEUTRAL,   LEFT_NEUTRAL+1, \"_onlyleft1\", 5],\r\n                    \"_onlyleft1\": [LEFT_NEUTRAL+1, LEFT_NEUTRAL+2, \"_onlyleft2\", 5],\r\n                    \"_onlyleft2\": [LEFT_NEUTRAL,   LEFT_NEUTRAL+1, \"_onlyleft3\", 5],\r\n                    \"_onlyleft3\": [LEFT_NEUTRAL-1, LEFT_NEUTRAL,   \"onlyleft\",   5],\r\n\r\n                    \"onlyright\":   [RIGHT_NEUTRAL,   RIGHT_NEUTRAL+1, \"_onlyright1\", 5],\r\n                    \"_onlyright1\": [RIGHT_NEUTRAL+1, RIGHT_NEUTRAL+2, \"_onlyright2\", 5],\r\n                    \"_onlyright2\": [RIGHT_NEUTRAL,   RIGHT_NEUTRAL+1, \"_onlyright3\", 5],\r\n                    \"_onlyright3\": [RIGHT_NEUTRAL-1, RIGHT_NEUTRAL,   \"onlyright\",   5],\r\n\r\n                    \"upleft\":   [UPLEFT_NEUTRAL,   UPLEFT_NEUTRAL+1, \"_upleft1\", 5],\r\n                    \"_upleft1\": [UPLEFT_NEUTRAL+1, UPLEFT_NEUTRAL+2, \"_upleft2\", 5],\r\n                    \"_upleft2\": [UPLEFT_NEUTRAL,   UPLEFT_NEUTRAL+1, \"_upleft3\", 5],\r\n                    \"_upleft3\": [UPLEFT_NEUTRAL-1, UPLEFT_NEUTRAL,   \"upleft\",   5],\r\n\r\n                    \"upright\":   [UPRIGHT_NEUTRAL,   UPRIGHT_NEUTRAL+1, \"_upright1\", 5],\r\n                    \"_upright1\": [UPRIGHT_NEUTRAL+1, UPRIGHT_NEUTRAL+2, \"_upright2\", 5],\r\n                    \"_upright2\": [UPRIGHT_NEUTRAL,   UPRIGHT_NEUTRAL+1, \"_upright3\", 5],\r\n                    \"_upright3\": [UPRIGHT_NEUTRAL-1, UPRIGHT_NEUTRAL,   \"upright\",   5],\r\n\r\n                    \"downleft\":   [DOWNLEFT_NEUTRAL,   DOWNLEFT_NEUTRAL+1, \"_downleft1\", 5],\r\n                    \"_downleft1\": [DOWNLEFT_NEUTRAL+1, DOWNLEFT_NEUTRAL+2, \"_downleft2\", 5],\r\n                    \"_downleft2\": [DOWNLEFT_NEUTRAL,   DOWNLEFT_NEUTRAL+1, \"_downleft3\", 5],\r\n                    \"_downleft3\": [DOWNLEFT_NEUTRAL-1, DOWNLEFT_NEUTRAL,   \"downleft\",   5],\r\n\r\n                    \"downright\":   [DOWNRIGHT_NEUTRAL,   DOWNRIGHT_NEUTRAL+1, \"_downright1\", 5],\r\n                    \"_downright1\": [DOWNRIGHT_NEUTRAL+1, DOWNRIGHT_NEUTRAL+2, \"_downright2\", 5],\r\n                    \"_downright2\": [DOWNRIGHT_NEUTRAL,   DOWNRIGHT_NEUTRAL+1, \"_downright3\", 5],\r\n                    \"_downright3\": [DOWNRIGHT_NEUTRAL-1, DOWNRIGHT_NEUTRAL,   \"downright\",   5],\r\n                }\r\n            });\r\n\r\n            this.superInit(frame.width*drawImageScaleSize, frame.height*drawImageScaleSize, ss);\r\n\r\n            // 向いている方向を保持\r\n            this.velocity = tm.geom.Vector2(0, 0);\r\n\r\n            // アニメーションさせる場合に指定\r\n            this.isAnimation = true;\r\n\r\n            // 操作を受け付けるか指定\r\n            this.isInput = false;\r\n\r\n            // ランダム移動を受け付けるか指定\r\n            this.isAuto = false;\r\n\r\n            // padがあれば追加する\r\n            this.pad = false;\r\n\r\n            // 向いている方向を保持\r\n            this.angle = 270;\r\n\r\n            // 歩くスピード\r\n            this.speed = 6;\r\n        },\r\n\r\n        // 入力でパッドも使うならセットする\r\n        setInputPad: function (pad) {\r\n            this.pad = pad || false;\r\n        },\r\n\r\n        // 向いている方向を決める\r\n        directWatch: function (angle) {\r\n            if (this._exceptDirectWatch(angle)) {\r\n                if (     ANGLE_DOWN      - 22.5 < angle && angle <= ANGLE_DOWN      + 22.5) { this.gotoAndPlay(\"onlydown\"); }\r\n                else if (ANGLE_DOWNLEFT  - 22.5 < angle && angle <= ANGLE_DOWNLEFT  + 22.5) { this.gotoAndPlay(\"downleft\"); }\r\n                else if (ANGLE_LEFT      - 22.5 < angle && angle <= ANGLE_LEFT      + 22.5) { this.gotoAndPlay(\"onlyleft\"); }\r\n                else if (ANGLE_UPLEFT    - 22.5 < angle && angle <= ANGLE_UPLEFT    + 22.5) { this.gotoAndPlay(\"upleft\"); }\r\n                else if (ANGLE_UP        - 22.5 < angle && angle <= ANGLE_UP        + 22.5) { this.gotoAndPlay(\"onlyup\"); }\r\n                else if (ANGLE_UPRIGHT   - 22.5 < angle && angle <= ANGLE_UPRIGHT   + 22.5) { this.gotoAndPlay(\"upright\"); }\r\n                else if (ANGLE_DOWNRIGHT + 22.5 < angle || angle <= ANGLE_RIGHT     + 22.5) { this.gotoAndPlay(\"onlyright\"); }\r\n                else if (ANGLE_DOWNRIGHT - 22.5 < angle && angle <= ANGLE_DOWNRIGHT + 22.5) { this.gotoAndPlay(\"downright\"); }\r\n            }\r\n        },\r\n\r\n        // 入力を受け付けてアニメーションする\r\n        inputAnimation: function (app) {\r\n            // 入力受付\r\n            if (this.isInput) {\r\n                var angle = app.keyboard.getKeyAngle();\r\n                if (angle !== null && this.isAnimation) {\r\n                    this.velocity.setDegree(angle, 1);\r\n                    this.velocity.y *= -1;\r\n                    this.directWatch(angle);\r\n                    this.angle = angle;\r\n                }\r\n                // タッチパネルによる速度設定\r\n                else if (this.pad && this.pad.isTouching) {\r\n\r\n                    var padAngle = this.pad.angle;\r\n                    if   (padAngle < 0) {padAngle *= -1;}\r\n                    else                {padAngle = 360 - padAngle;}\r\n                    this.velocity.setDegree(padAngle, 1);\r\n                    this.velocity.y *= -1;\r\n                    this.directWatch(padAngle);\r\n                    this.angle = padAngle;\r\n                }\r\n                else {\r\n                    this.paused = true;\r\n                }\r\n                // console.log(\"x : \" + this.x + \" y : \" + this.y);\r\n            }\r\n        },\r\n\r\n        // 指定方向以外の向きか調べる\r\n        _exceptDirectWatch: function (angle) {\r\n            if (this.currentAnimation) {\r\n                if (this.currentAnimation.next.indexOf(\"onlydown\", 0) !== -1) {\r\n                    if (ANGLE_DOWN - 22.5 < angle && angle <= ANGLE_DOWN + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"downleft\", 0) !== -1) {\r\n                    if (ANGLE_DOWNLEFT - 22.5 < angle && angle <= ANGLE_DOWNLEFT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"onlyleft\", 0) !== -1) {\r\n                    if (ANGLE_LEFT - 22.5 < angle && angle <= ANGLE_LEFT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"upleft\", 0) !== -1) {\r\n                    if (ANGLE_UPLEFT - 22.5 < angle && angle <= ANGLE_UPLEFT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"onlyup\", 0) !== -1) {\r\n                    if (ANGLE_UP - 22.5 < angle && angle <= ANGLE_UP + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"upright\", 0) !== -1) {\r\n                    if (ANGLE_UPRIGHT - 22.5 < angle && angle <= ANGLE_UPRIGHT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"onlyright\", 0) !== -1) {\r\n                    if (ANGLE_DOWNRIGHT + 22.5 < angle || angle <= ANGLE_RIGHT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n                else if (this.currentAnimation.next.indexOf(\"downright\", 0) !== -1) {\r\n                    if (ANGLE_DOWNRIGHT - 22.5 < angle && angle <= ANGLE_DOWNRIGHT + 22.5) { this.paused = false; return false; }\r\n                    else { return true; }\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    });\r\n\r\n})(game);"]],"start1":0,"start2":0,"length1":0,"length2":9581}]],"length":9581}
