{"ts":1369442848661,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * AnotherPlayer\r\n */\r\n(function(ns) {\r\n\r\n\tns.AnotherPlayer = tm.createClass({\r\n\t\tsuperClass : ns.AnimationCharactor,\r\n\r\n\t\tinit: function () {\r\n\t\t\tthis.superInit(\"player\", {\r\n\t\t\t\twidth:  120/6,\r\n\t\t\t\theight: 112/4,\r\n\t\t\t\tcount:  24,\r\n\t\t\t}, 3);\r\n\t\t\t// プレイヤーなので操作を受け付けるように設定\r\n\t\t\tthis.isInput = false;\r\n\r\n\t\t\t// ダメージ= [[[最終ATK * スキル倍率 ] * (4000 + 除算Def) / (4000 + 除算DEF * 10)] * 種族耐性] - 減算DEF\r\n\r\n\t\t\tthis.level = 1;\r\n\r\n\t\t\tthis.maxhp = 30;\r\n\t\t\tthis.hp    = 30;\r\n\t\t\tthis.maxmp = 10;\r\n\t\t\tthis.mp    = 10;\r\n\r\n\t\t\tthis._str = 1; // 攻撃力\r\n\t\t\tthis._def = 1; // 防御力\r\n\t\t\t// this._int = 40; // 魔力\r\n\t\t\tthis._agi = 4; // 素早さ\r\n\t\t\tthis._luk = 1; // 運\r\n\t\t\tthis._vit = 1; // 体力\r\n\t\t\tthis._dex = 1; // 器用さ\r\n\r\n\t\t\tthis._aspd = 190; // 攻撃スピード\r\n\r\n\t\t\tthis.speed = 5;\r\n\r\n\t\t\tthis.exp = 0; // 取得経験値\r\n\t\t\tthis.nextLevelExp = 8;\r\n\r\n\t\t\tthis.item = [];\r\n\r\n\t\t\tthis.equipedWeapon = null;\r\n\t\t\tthis.equipedArmor  = null;\r\n\t\t},\r\n\r\n\t\tgetLevel: function ()\t\t{ return this.level; },\r\n\t\tgetMaxHP: function ()\t\t{ return this.maxhp; },\r\n\t\tgetCurrentHP: function ()\t{ return this.hp; },\r\n\t\tgetMaxMP: function ()\t\t{ return this.maxmp; },\r\n\t\tgetCurrentMP: function ()\t{ return this.mp; },\r\n\t\tgetSTR: function ()\t\t\t{ return this._str; },\r\n\t\tgetDEF: function ()\t\t\t{ return this._def; },\r\n\t\tgetAGI: function ()\t\t\t{ return this._agi; },\r\n\t\tgetLUK: function ()\t\t\t{ return this._luk; },\r\n\t\tgetVIT: function ()\t\t\t{ return this._vit; },\r\n\t\tgetDEX: function ()\t\t\t{ return this._dex; },\r\n\t\tgetEXP: function ()\t\t\t{ return this.exp; },\r\n\t\tgetNextLevel: function ()\t{ return this.nextLevelExp; },\r\n\t\t// isGameOver: function ()\t\t{ return this._isGameOver; },\r\n\r\n\r\n\t\tgetSpeed: function () {\r\n\t\t\treturn this.speed + (this.getLastAGI()/2 |0);\r\n\t\t},\r\n\r\n\t\tgetLastAGI: function () {\r\n\t\t\tvar agi = this.getAGI();\r\n\t\t\tif (this.equipedWeapon !== null) {\r\n\t\t\t\tagi += this.equipedWeapon.status.agi;\r\n\t\t\t}\r\n\t\t\tif (this.equipedArmor !== null) {\r\n\t\t\t\tagi += this.equipedArmor.status.agi;\r\n\t\t\t}\r\n\t\t\treturn agi;\r\n\t\t},\r\n\r\n\t\tgetAttackSpeed: function (fps) {\r\n\t\t\t// 攻撃速度を計算\r\n\t\t\t// var attackSpeed = this._aspd + Math.sqrt(this.getLastAGI() * (10 + 10/111) + (this.getDEX() * 9 / 49));\r\n\t\t\tvar attackSpeed = this._aspd + Math.sqrt(this.getLastAGI() * (150000) + (this.getDEX() * 9 / 49));\r\n\t\t\t// attackSpeed = (attackSpeed > 190) ? 190 : (attackSpeed |0);\r\n\t\t\t// attackSpeed = (attackSpeed > 250) ? 190 : (attackSpeed |0);\r\n\r\n\t\t\t// フレーム速に変換して返す\r\n\t\t\treturn fps / (attackSpeed / 150);\r\n\t\t},\r\n\r\n\t\tgetDistanse: function () {\r\n\t\t\tif (this.equipedWeapon !== null) {\r\n\t\t\t\treturn this.equipedWeapon.status.dis;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t},\r\n\r\n\t\teatMedicine: function (item) {\r\n\t\t\tif (!item.status) {\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tthis.hp += item.status.hp || 0;\r\n\t\t\ttm.asset.AssetManager.get(\"eat\").clone().play();\r\n\t\t\tif (this.hp > this.maxhp) {\r\n\t\t\t\tthis.hp = this.maxhp;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tlevelUp: function (app) {\r\n\t\t\t// パラメータ上昇\r\n\t\t\tthis.maxhp += Math.rand(0, 10);\r\n\t\t\tthis.maxmp += Math.rand(0, 5);\r\n\t\t\tthis._str  += Math.rand(0, 2); // 攻撃力\r\n\t\t\tthis._def  += Math.rand(0, 2); // 防御力\r\n\t\t\t// this._int = 40; // 魔力\r\n\t\t\tthis._agi  += (Math.rand(0, 8) === 0) ? 1 : 0; // 素早さ\r\n\t\t\tthis._luk  += Math.rand(0, 2); // 運\r\n\t\t\tthis._vit  += Math.rand(0, 2); // 体力\r\n\t\t\tthis._dex  += Math.rand(0, 2); // 器用さ\r\n\r\n\t\t\t// HP全回復\r\n\t\t\tthis.hp = this.maxhp;\r\n\t\t\tthis.mp = this.maxmp;\r\n\r\n\t\t\t// 音\r\n\t\t\ttm.asset.AssetManager.get(\"levelup\").clone().play();\r\n\r\n\t\t\t// ウィンドウ表示\r\n\t\t\tapp.currentScene.windows.add(\"レベルが\" + this.level + \"に上がった\", 255, 255, 30);\r\n\t\t},\r\n\r\n\t\taddExp: function (exp, app) {\r\n\t\t\tthis.exp += exp;\r\n\t\t\tif (this.exp >= this.nextLevelExp) {\r\n\t\t\t\t++this.level;\r\n\t\t\t\tthis.nextLevelExp = Math.ceil(this.nextLevelExp * 1.4);\r\n\t\t\t\tthis.levelUp(app);\r\n\t\t\t\tthis.addExp(0);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddItem: function (item) {\r\n\t\t\tthis.item.push(item);\r\n\t\t},\r\n\r\n\t\tgetItem: function () {\r\n\t\t\treturn this.item;\r\n\t\t},\r\n\r\n\t\tdeleteItem: function (itemNum) {\r\n\t\t\tthis.item.splice(itemNum, 1);\r\n\t\t},\r\n\r\n\t\tequipWeapon: function (item) {\r\n\t\t\tif (item) {\r\n\t\t\t\tthis.equipedWeapon = item;\r\n\t\t\t\ttm.asset.AssetManager.get(\"equip\").clone().play();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.equipedWeapon = null;\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetWeapon: function () {\r\n\t\t\tif (this.equipedWeapon === null) {\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tdropImage: null,\r\n\t\t\t\t\tname: \"装備無し\",\r\n\t\t\t\t\tstatus: {\r\n\t\t\t\t\t\tdis: 0,\r\n\t\t\t\t\t\tstr: 0,\r\n\t\t\t\t\t\tdef: 0,\r\n\t\t\t\t\t\tagi: 0,\r\n\t\t\t\t\t\tluk: 0,\r\n\t\t\t\t\t\tvit: 0,\r\n\t\t\t\t\t\tdex: 0\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\treturn this.equipedWeapon;\r\n\t\t},\r\n\r\n\t\tequipArmor: function (item) {\r\n\t\t\tif (item) {\r\n\t\t\t\tthis.equipedArmor = item;\r\n\t\t\t\ttm.asset.AssetManager.get(\"equip\").clone().play();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.equipedArmor = null;\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetArmor: function () {\r\n\t\t\tif (this.equipedArmor === null) {\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tdropImage: null,\r\n\t\t\t\t\tname: \"装備無し\",\r\n\t\t\t\t\tstatus: {\r\n\t\t\t\t\t\tstr: 0,\r\n\t\t\t\t\t\tdef: 0,\r\n\t\t\t\t\t\tagi: 0,\r\n\t\t\t\t\t\tluk: 0,\r\n\t\t\t\t\t\tvit: 0,\r\n\t\t\t\t\t\tdex: 0\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\treturn this.equipedArmor;\r\n\t\t},\r\n\r\n\t\tgetAttackPoint: function (attack) {\r\n\t\t\t// 攻撃力を計算\r\n\t\t\tvar random = Math.rand(9, 11) / 10;\r\n\t\t\tvar attackpoint = ((this._str + this._dex/5 + this._luk/3) * random)|0;\r\n\t\t\tattackpoint += this.getWeapon().status.str + this.getArmor().status.str;\r\n\t\t\treturn attackpoint;\r\n\t\t},\r\n\r\n\t\tdamage: function (attack) {\r\n\t\t\tvar damage = (attack - this._def - this.getWeapon().status.def - this.getArmor().status.def) |0;\r\n\t\t\tdamage = (damage < 0) ? 0 : damage;\r\n\r\n\t\t\tthis.hp -= damage;\r\n\t\t\tthis.hp = (this.hp < 0) ? 0 : this.hp;\r\n\r\n\t\t\t// hpが0になったら死亡\r\n\t\t\tif (this.hp <= 0) {\r\n\t\t\t\t// this._isGameOver = true;\r\n\t\t\t\ttm.asset.AssetManager.get(\"playerdown\").clone().play();\r\n\t\t\t}\r\n\r\n\t\t\treturn damage;\r\n\t\t},\r\n\r\n\t\tattack: function () {\r\n\t\t\ttm.asset.AssetManager.get(\"enemydamage\").clone().play();\r\n\t\t\treturn this.angle;\r\n\t\t},\r\n\r\n\t\tupdate: function (app) {\r\n\t\t\tthis.inputAnimation(app);\r\n\t\t}\r\n\t});\r\n\r\n})(game);"]],"start1":0,"start2":0,"length1":0,"length2":5797}]],"length":5797}
{"contributors":[],"silentsave":false,"ts":1369442976618,"patch":[[{"diffs":[[0,"p);\r\n\t\t}"],[1,",\r\n        \r\n        /**\r\n         * 自動移動\r\n         */\r\n        autoMove: function (position) {\r\n            ;\r\n        },"],[0,"\r\n\t});\r\n"]],"start1":5770,"start2":5770,"length1":16,"length2":138}]],"length":5919,"saved":false}
{"ts":1369444595937,"patch":[[{"diffs":[[0,"        "],[1,"// 目的地へのベクトルを取得\r\n            var direct = this.getDirect(this.position, position);\r\n            // 指定された座標が現在と同じであれば移動しない\r\n            if (direct.x <= 0.1 && direct.y <= 0.1) {\r\n                return ;\r\n            }\r\n\t\t\t// 目的地へ角度を求める\r\n\t\t\tvar angle = this.getAngle(direct.clone());\r\n            // 角度の方向へ向く\r\n\t\t\tthis.directWatch(angle);\r\n            // 移動\r\n            direct.normalize();\r\n            this.position.add(tm.geom.Vector2.mul(direct, this.speed));\r\n        },\r\n        \r\n        /**\r\n         * ベクトルを取得\r\n         */\r\n        getDirect: function (from, to) {\r\n            return to.clone().sub(from);\r\n        },\r\n        \r\n        /**\r\n         * 角度を取得\r\n         */\r\n        getAngle: function (normal) {\r\n\t\t\tnormal.x *= -1;\r\n\t\t\tnormal.y *= -1;\r\n\t\t\tvar angle = Math.radToDeg(normal.toAngle());\r\n            \r\n            // 右箇所0から始まり、360度の角度に変換\r\n    \t\tangle -= 180;\r\n            if   (angle < 0) {angle *= -1;}\r\n            else             {angle = 360 - angle;}\r\n            return angle"],[0,";\r\n     "]],"start1":5879,"start2":5879,"length1":16,"length2":1019}]],"length":6922,"saved":false}
