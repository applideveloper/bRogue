{"ts":1369444654293,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * GameEventManager\r\n * アチーブの管理とかに使う\r\n * グローバル変数を作成しているので注意\r\n */\r\n(function(ns) {\r\n\r\n    // var EVENT_NAME_LIST = [\r\n    //     \"attackPlayer\",\r\n    //     \"noWeaponAttackPlayer\",\r\n    //     \"equipWeapon\",\r\n    //     \"equipArmor\",\r\n    //     \"killDragon\",\r\n    //     \"eatMedicine\",\r\n    //     \"getAllItem\",\r\n    //     \"getAllWeapon\",\r\n    //     \"getAllArmor\",\r\n    //     \"getAllMedicine\",\r\n    //     \"perfectComplete\",\r\n    //     \"gameClear\",\r\n    //     \"gameOver\",\r\n    //     \"gameStart\",\r\n    //     \"oneShotOneKill\",\r\n    //     \"damagePlayer\",\r\n    //     \"hitPlayer\"\r\n    // ];\r\n\r\n    // var ACHIEVE = {\r\n    //     \"ドラゴンキラー\",\r\n    //     \"持たざるもの\",\r\n    //     \"拳法家\",\r\n    //     \"はだかの勇者\",\r\n    //     \"節約家\",\r\n    //     \"コレクター\",\r\n    //     \"武器屋\",\r\n    //     \"防具屋\",\r\n    //     \"薬屋\",\r\n    //     \"完全制覇\",\r\n    //     \"スピードキング\",\r\n    //     \"一撃必殺\",\r\n    //     \"多撃必倒\",\r\n    //     \"鉄壁の守り\",\r\n    //     \"忍\",\r\n    //     \"不殺\",\r\n    //     \"リベンジャー\",\r\n    //     \"\",\r\n    //     \"\",\r\n    //     \"\",\r\n    // };\r\n\r\n    ns.GameEventManager = tm.createClass({\r\n\r\n        init : function(player, playerPosition, map) {\r\n            // オンライン化\r\n            // グローバル変数を作成しているので注意\r\n            this.socket = io.connect();\r\n\r\n            this.anotherPlayerGroup = tm.app.CanvasElement();\r\n\r\n            this.playerPosition = playerPosition;\r\n            this.player = player;\r\n\r\n            map.addChild(this.anotherPlayerGroup);\r\n        },\r\n\r\n        update : function() {\r\n            // 接続処理\r\n            var socket = this.socket;\r\n\r\n            // 接続完了のメッセージ取得\r\n            var position = this.playerPosition.clone();\r\n            socket.on(\"connected\", function (data) {\r\n                // 初めての接続時に発生\r\n                // 仮の名前を送信する\r\n                var message = {\r\n                    name: \"名無し\",\r\n                    position: position,\r\n                };\r\n                socket.emit(\"addPlayerName\", message);\r\n            });\r\n\r\n            // サーバにプレイヤーデータ登録完了\r\n            var player = this.player;\r\n            socket.on(\"addedPlayer\", function (id) {\r\n                player.name = id;\r\n            });\r\n\r\n            // 既に接続済みのメンバーのデータを取得\r\n            socket.on(\"addedAnotherPlayers\", function (message) {\r\n                for (var i = 0; i < message.length; ++i) {\r\n                    if (anotherPlayerGroup.getChildByName(message[i].id)) {\r\n                        continue;\r\n                    }\r\n                    var anotherPlayer = ClassPlayer();\r\n                    anotherPlayer.position.set(message[i].position.x, message[i].position.y);\r\n                    anotherPlayer.name = message[i].id;\r\n                    anotherPlayerGroup.addChild(anotherPlayer);\r\n                }\r\n            });\r\n\r\n            // 他プレイヤー接続\r\n            var anotherPlayerGroup = this.anotherPlayerGroup;\r\n            var ClassPlayer = ns.AnotherPlayer;\r\n            socket.on(\"addedAnotherPlayer\", function (message) {\r\n                if (anotherPlayerGroup.getChildByName(message.id)) {\r\n                    return ;\r\n                }\r\n                var anotherPlayer = ClassPlayer();\r\n                anotherPlayer.position.set(message.position.x, message.position.y);\r\n                anotherPlayer.name = message.id;\r\n                anotherPlayerGroup.addChild(anotherPlayer);\r\n            });\r\n\r\n            // 他プレイヤー移動\r\n            socket.on(\"moveAnotherPlayer\", function (message) {\r\n                var anotherPlayer = anotherPlayerGroup.getChildByName(message.id);\r\n                if (anotherPlayer) {\r\n                    anotherPlayer.position.set(message.position.x, message.position.y);\r\n                    anotherPlayer.paused = message.paused;\r\n                    anotherPlayer.directWatch(message.angle);\r\n                }\r\n            });\r\n\r\n            // プレイヤー削除\r\n            socket.on(\"deleteAnotherPlayer\", function (message) {\r\n                var anotherPlayer = anotherPlayerGroup.getChildByName(message);\r\n                anotherPlayerGroup.removeChild(anotherPlayer);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * システムに関するイベント\r\n         */\r\n        gameStart: function (playerPosition) {},\r\n        gameClear: function () {},\r\n        gameOver: function () {},\r\n        gameReStart: function () {},\r\n\r\n        /**\r\n         * プレイヤーに関するイベント\r\n         */\r\n        attackPlayer: function () {},\r\n        movePlayer: function (position, angle, paused) {\r\n            var socket = this.socket;\r\n            var message = {\r\n                position: position,\r\n                angle: angle,\r\n                paused: paused,\r\n            };\r\n            socket.emit(\"movePlayer\", message);\r\n        },\r\n        noWeaponAttackPlayer: function () {},\r\n        equipWeapon: function () {},\r\n        equipArmor: function () {},\r\n        eatMedicine: function () {},\r\n        hitPlayer: function () {},\r\n        damagePlayer: function () {},\r\n        getItem: function () {},\r\n\r\n        /**\r\n         * 他プレイヤーに関するイベント\r\n         */\r\n        attackAnotherPlayer: function () {},\r\n        moveAnotherPlayer: function () {},\r\n\r\n        /**\r\n         * 敵に関するイベント\r\n         */\r\n        killDragon: function () {},\r\n        perfectComplete: function () {},\r\n        oneShotOneKill: function () {},\r\n\r\n        /**\r\n         * アチーブメントに直接関するイベント\r\n         */\r\n        getAllItem: function () {},\r\n        getAllWeapon: function () {},\r\n        getAllArmor: function () {},\r\n        getAllMedicine: function () {},\r\n    });\r\n\r\n})(game);"]],"start1":0,"start2":0,"length1":0,"length2":5480}]],"length":5480}
{"contributors":[],"silentsave":false,"ts":1369444742414,"patch":[[{"diffs":[[0,"    "],[-1,"anotherPlayer.position.set"],[1,"var vector = tm.geom.Vector2"],[0,"(mes"]],"start1":3555,"start2":3555,"length1":34,"length2":36},{"diffs":[[0,"e.position.y);\r\n"],[1,"                    anotherPlayer.autoMove(vector);\r\n"],[0,"                "]],"start1":3614,"start2":3614,"length1":32,"length2":85},{"diffs":[[0,"ge.paused;\r\n"],[-1,""],[0,"            "]],"start1":3731,"start2":3731,"length1":24,"length2":24},{"diffs":[[0,"                "],[1," //"],[0," anotherPlayer.d"]],"start1":3746,"start2":3746,"length1":32,"length2":35}]],"length":5538,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369445117426,"patch":[[{"diffs":[[0,"yerGroup);\r\n"],[1,"            \r\n            // 移動ポイントを送信するタイミング\r\n            this.frameMoveEmit = 30;\r\n            this.currentFrame = 0;\r\n"],[0,"        },\r\n"]],"start1":1427,"start2":1427,"length1":24,"length2":145},{"diffs":[[0," paused) {\r\n"],[1,"            ++this.currentFrame;\r\n            if (this.currentFrame > this.frameMoveEmit) {\r\n                this.currentFrame = 0;\r\n                \r\n    "],[0,"            "]],"start1":4584,"start2":4584,"length1":24,"length2":179},{"diffs":[[0,"t;\r\n            "],[1,"   "],[1," "],[0,"var message = {\r"]],"start1":4786,"start2":4786,"length1":32,"length2":36},{"diffs":[[0,"ar message = {\r\n"],[1,"    "],[0,"                "]],"start1":4807,"start2":4807,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"angle: a"]],"start1":4872,"start2":4872,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"   "],[1," "],[0,"paused: "]],"start1":4907,"start2":4907,"length1":16,"length2":20},{"diffs":[[0,"d,\r\n            "],[-1,"};\r\n"],[1,"    };\r\n    "],[0,"            sock"]],"start1":4932,"start2":4932,"length1":36,"length2":44},{"diffs":[[0,"er\", message);\r\n"],[1,"            }\r\n"],[0,"        },\r\n    "]],"start1":4993,"start2":4993,"length1":32,"length2":47}]],"length":5853,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369474573817,"patch":[[{"diffs":[[0,"oveEmit) {\r\n"],[1,"                console.log(\"movePlayer 送信\");\r\n"],[0,"            "]],"start1":4677,"start2":4677,"length1":24,"length2":71}]],"length":5900,"saved":false}
{"ts":1369475120378,"patch":[[{"diffs":[[0,"on (message) {\r\n"],[1,"                console.log(\"movePlayer 受信\");\r\n                console.dir(message);\r\n"],[0,"                "]],"start1":3522,"start2":3522,"length1":32,"length2":118},{"diffs":[[0," {\r\n"],[-1,"                console.log(\"movePlayer 送信\");\r\n"],[0,"    "]],"start1":4771,"start2":4771,"length1":55,"length2":8}]],"length":5939,"saved":false}
{"ts":1369476441272,"patch":[[{"diffs":[[0," {\r\n"],[-1,"                console.log(\"movePlayer 受信\");\r\n                console.dir(message);\r\n"],[0,"    "]],"start1":3534,"start2":3534,"length1":94,"length2":8}]],"length":5853,"saved":false}
{"ts":1369477788077,"patch":[[{"diffs":[[0,"yer."],[-1,"autoMove"],[1,"setAutoPosition"],[0,"(vec"]],"start1":3781,"start2":3781,"length1":16,"length2":23}]],"length":5860,"saved":false}
{"ts":1369477955251,"patch":[[{"diffs":[[0,"e.position.y);\r\n"],[1,"                    console.log(message.position.x + \" \" + message.position.y);\r\n"],[0,"                "]],"start1":3735,"start2":3735,"length1":32,"length2":113}]],"length":5941,"saved":false}
{"ts":1369483638456,"patch":[[{"diffs":[[0,"            };\r\n"],[1,"                console.dir(message);\r\n"],[0,"                "]],"start1":1980,"start2":1980,"length1":32,"length2":71}]],"length":5980,"saved":false}
{"ts":1369484017909,"patch":[[{"diffs":[[0,"e = 0;\r\n        "],[-1,"},\r\n"],[1,"    "],[0,"\r\n        update"]],"start1":1552,"start2":1552,"length1":36,"length2":36},{"diffs":[[0,"    "],[-1,"update : function() {\r\n            // 接続処理\r\n            var socket = this.socket;\r\n\r\n            // 接続完了のメッセージ取得"],[1,"    \r\n            // 初めての接続時に発生\r\n            // 仮の名前を送信する\r\n            var message = {\r\n                name: \"名無し\","],[0,"\r\n  "]],"start1":1578,"start2":1578,"length1":120,"length2":124},{"diffs":[[0,"        "],[-1,"var"],[1,"   "],[0," positio"]],"start1":1704,"start2":1704,"length1":19,"length2":19},{"diffs":[[0,"tion"],[-1," = this.playerPosition.clone("],[1,": position,\r\n            };\r\n            console.dir(message"],[0,");\r\n"]],"start1":1720,"start2":1720,"length1":37,"length2":68},{"diffs":[[0,"    "],[1,"this."],[0,"socket."],[-1,"on(\"connected\", function (data) {"],[1,"emit(\"addPlayerName\", message);"],[0,"\r\n  "]],"start1":1796,"start2":1796,"length1":48,"length2":51},{"diffs":[[0,"    "],[1,"},\r\n\r\n"],[0,"        "],[-1,"// 初めての接続時に発生\r\n                // 仮の名前を送信する\r\n                var message = {\r\n                    name: \"名無し\","],[1,"update : function() {\r\n            // 接続処理\r\n            var socket = this.socket;\r\n\r\n            // 接続完了のメッセージ取得"],[0,"\r\n  "]],"start1":1849,"start2":1849,"length1":126,"length2":134},{"diffs":[[0,"取得\r\n            "],[-1,"       "],[1,"var"],[0," position: posit"]],"start1":1977,"start2":1977,"length1":39,"length2":35},{"diffs":[[0,"tion"],[-1,": position,\r\n                };\r\n                console.dir(message);\r\n                socket.emit(\"addPlayerName\", message);"],[1," = this.playerPosition.clone();\r\n            socket.on(\"connected\", function (data) {"],[0,"\r\n  "]],"start1":2001,"start2":2001,"length1":134,"length2":93}]],"length":5981,"saved":false}
{"ts":1369484107844,"patch":[[{"diffs":[[0,"前を送信する\r\n"],[1,"            var position = this.playerPosition.clone();\r\n"],[0,"        "]],"start1":1633,"start2":1633,"length1":16,"length2":73},{"diffs":[[0,"取得\r\n"],[-1,"            var position = this.playerPosition.clone();\r\n"],[0,"    "]],"start1":2034,"start2":2034,"length1":65,"length2":8}]],"length":5981,"saved":false}
{"ts":1369484455008,"patch":[[{"diffs":[[0,"                "],[1," //"],[0," anotherPlayer.p"]],"start1":3935,"start2":3935,"length1":32,"length2":35}]],"length":5984,"saved":false}
